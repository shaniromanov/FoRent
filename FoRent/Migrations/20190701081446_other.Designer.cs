// <auto-generated />
using FoRent.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace FoRent.Migrations
{
    [DbContext(typeof(FoRentContext))]
    [Migration("20190701081446_other")]
    partial class other
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoRent.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AmenitiesId");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("PolicyId");

                    b.Property<decimal>("PriceAdult");

                    b.Property<decimal>("PriceChild");

                    b.Property<string>("RenterPassword");

                    b.HasKey("Id");

                    b.HasIndex("AmenitiesId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("RenterPassword");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("FoRent.Models.ApartmentAmenities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accessibility");

                    b.Property<bool>("AirConditioning");

                    b.Property<bool>("Balcony");

                    b.Property<string>("Comment");

                    b.Property<string>("Description");

                    b.Property<bool>("HotWater");

                    b.Property<int>("NumOfPersons");

                    b.Property<double>("NumOfRooms");

                    b.Property<bool>("Parking");

                    b.Property<bool>("Plata");

                    b.Property<bool>("Wifi");

                    b.HasKey("Id");

                    b.ToTable("ApartmentAmenities");
                });

            modelBuilder.Entity("FoRent.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Lat");

                    b.Property<double>("Lng");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("FoRent.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApartmentId");

                    b.Property<DateTime>("CheckIn");

                    b.Property<DateTime>("CheckOut");

                    b.Property<int>("QuantityAdult");

                    b.Property<int>("QuantityChild");

                    b.Property<string>("RenterPassword");

                    b.Property<string>("UserPassword");

                    b.HasKey("Id");

                    b.HasIndex("RenterPassword");

                    b.HasIndex("UserPassword");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("FoRent.Models.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cancellations");

                    b.Property<string>("Checkin");

                    b.Property<string>("Checkout");

                    b.Property<string>("Creditcardsaccepted");

                    b.Property<string>("Extrabeds");

                    b.HasKey("Id");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("FoRent.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApartmentId");

                    b.Property<string>("review");

                    b.Property<int>("stars");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FoRent.Models.User", b =>
                {
                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Mail");

                    b.Property<string>("Phone");

                    b.Property<string>("Username");

                    b.HasKey("Password");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("FoRent.Models.Renter", b =>
                {
                    b.HasBaseType("FoRent.Models.User");


                    b.ToTable("Renter");

                    b.HasDiscriminator().HasValue("Renter");
                });

            modelBuilder.Entity("FoRent.Models.Apartment", b =>
                {
                    b.HasOne("FoRent.Models.ApartmentAmenities", "Amenities")
                        .WithMany("Apartments")
                        .HasForeignKey("AmenitiesId");

                    b.HasOne("FoRent.Models.Location", "Location")
                        .WithMany("Apartments")
                        .HasForeignKey("LocationId");

                    b.HasOne("FoRent.Models.Policy", "Policy")
                        .WithMany("Apartments")
                        .HasForeignKey("PolicyId");

                    b.HasOne("FoRent.Models.Renter", "Renter")
                        .WithMany("Apartments")
                        .HasForeignKey("RenterPassword");
                });

            modelBuilder.Entity("FoRent.Models.Order", b =>
                {
                    b.HasOne("FoRent.Models.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterPassword");

                    b.HasOne("FoRent.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserPassword");
                });

            modelBuilder.Entity("FoRent.Models.Reviews", b =>
                {
                    b.HasOne("FoRent.Models.Apartment", "Apartment")
                        .WithMany("Reviews")
                        .HasForeignKey("ApartmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
